# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]

env:
  DOCKER_IMG_FULL_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMG_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

#      - name: Set up Zulu OpenJDK 8
#        uses: actions/setup-java@v3
#        with:
#          java-version: '8'
#          distribution: 'zulu'

#      - name: Edit application.properties
#        run: |
#          echo ">> Enter directory"
#          mkdir -p ./src/main/resources
#          cd ./src/main/resources
#
#          echo ">> Edit local1 properties"
#          echo -e "${{ secrets.AWS_S3_ACCESS_KEY }}" >> ./application-local1.properties
#          echo -e "${{ secrets.AWS_S3_BUCKET_KEY }}" >> ./application-local1.properties
#          echo -e "${{ secrets.AWS_S3_SECRET_KEY }}" >> ./application-local1.properties
#
#          echo ">> Edit callo2 properties"
#          echo -e "${{ secrets.AWS_S3_ACCESS_KEY }}" >> ./application-callo2.properties
#          echo -e "${{ secrets.AWS_S3_BUCKET_KEY }}" >> ./application-callo2.properties
#          echo -e "${{ secrets.AWS_S3_SECRET_KEY }}" >> ./application-callo2.properties
#
#        shell: bash

#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew

#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: build

#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: Docker img build & Dockerhub push
#        run: |
#          docker build -t $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7} .
#          docker push $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}

      - name: Make Script file and Docker image Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: GITHUB_SHA,DOCKER_IMG_FULL_NAME
          script: |
            pwd
            echo -e \
            "#!/bin/bash
            
            DOCKER_IMG_FULL_NAME = $$DOCKER_IMG_FULL_NAME
            GITHUB_SHA = $$GITHUB_SHA" \
            > env.sh
            
#            function find_idle_profile(){
#              RESPONSE_CODE=$(sudo curl -s -o /dev/null -w "%{http_code}" http://3.36.209.141/)
#
#              if [ ${RESPONSE_CODE} -ge 400 ] # 400 보다 크면 (즉, 40x/50x 에러 모두 포함)
#              then
#                  CURRENT_PROFILE=real2
#              else
#                  CURRENT_PROFILE=$(sudo curl -s http://3.36.209.141/)
#              fi
#
#              if [ ${CURRENT_PROFILE} == real1 ]
#              then
#                IDLE_PROFILE=real2
#              else
#                IDLE_PROFILE=real1
#              fi
#
#              echo "${IDLE_PROFILE}"
#            }
#            # 쉬고 있는 profile의 port 찾기
#            function find_idle_port(){
#              IDLE_PROFILE=$(find_idle_profile)
#
#              if [ ${IDLE_PROFILE} == real1 ]
#              then
#                echo "8081"
#              else
#                echo "8082"
#              fi
#            }" \
#            > profile.sh
#            chmod +x profile.sh

#            yes | docker image prune -a
#            docker pull $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}
#            docker stop spring
#            docker run -d --rm --name spring -e "active=real1" -p 8081:8081 $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}



