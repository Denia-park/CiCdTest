# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]

env:
  DOCKER_IMG_FULL_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMG_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Zulu OpenJDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'

      - name: make application.properties
        run: |
          echo "!! Mkdir & Touch"
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties

          echo "!! Copy properties"
          echo "${{ secrets.APPLICATION_PROPERTIES }}" >> ./application.properties
          cat application.properties
        shell: bash


      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker img build & Dockerhub push
        run: |
          docker build -t $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7} .
          docker push $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}

      - name: Docker Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: GITHUB_SHA,DOCKER_IMG_FULL_NAME
          script: |
            yes | docker image prune -a
            docker pull $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}
            docker stop spring
            docker run -d --rm --name spring -p 80:8081 $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}



